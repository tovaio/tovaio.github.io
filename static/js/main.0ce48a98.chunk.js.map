{"version":3,"sources":["GameOfLife.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["mod","n","m","generateGrid","nRows","nCols","rows","i","push","Array","fill","spawnCoords","GameOfLife","props","useState","grid","setGrid","running","useRef","runSimulation","useCallback","oldGrid","newGrid","j","nNeighbors","oi","oj","ni","nj","setTimeout","tickTime","runSpawn","pi","Math","floor","random","pj","produce","forEach","spawnTime","current","style","display","gridTemplateColumns","cellSize","map","row","val","key","onClick","gridCopy","width","height","backgroundColor","undefined","border","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0ce48a98.chunk.js","sourcesContent":["import React, { useState, useCallback, useRef } from 'react';\r\nimport produce from 'immer';\r\n\r\nconst mod = (n: number, m: number): number => {\r\n  return ((n % m) + m) % m;\r\n};\r\n\r\nconst generateGrid = (nRows: number, nCols: number): boolean[][] => {\r\n  const rows = [];\r\n  for (let i = 0; i < nRows; i++) {\r\n    rows.push(Array(nCols).fill(false));\r\n  }\r\n  return rows;\r\n}\r\n\r\ninterface GameOfLifeProps {\r\n\tnRows: number,\r\n\tnCols: number,\r\n\tcellSize: string,\r\n\ttickTime: number,\r\n\tspawnTime: number\r\n}\r\n\r\nconst spawnCoords = [\r\n\t[0, 0],\r\n\t[0, 1],\r\n\t[0, 2],\r\n\t[-1, 2],\r\n\t[-2, 1]\r\n];\r\n\r\nconst GameOfLife: React.FC<GameOfLifeProps> = (props) => {\r\n\tconst [ grid, setGrid ] = useState(() => generateGrid(props.nRows, props.nCols));\r\n\tconst running = useRef(false);\r\n\r\n  const runSimulation = useCallback(() => {\r\n    setGrid(oldGrid => {\r\n\t\t\tconst newGrid = generateGrid(props.nRows, props.nCols);\r\n\t\t\t\r\n      for (let i = 0; i < props.nRows; i++) {\r\n        for (let j = 0; j < props.nCols; j++) {\r\n          // count neighbors\r\n          let nNeighbors = 0;\r\n          for (let oi = -1; oi < 2; oi++) {\r\n\t\t\t\t\t\tfor (let oj = -1; oj < 2; oj++) {\r\n\t\t\t\t\t\t\tif (oi === 0 && oj === 0) continue;\r\n\r\n\t\t\t\t\t\t\tconst ni = mod(i + oi, props.nRows);\r\n\t\t\t\t\t\t\tconst nj = mod(j + oj, props.nCols);\r\n\t\t\t\t\t\t\tnNeighbors += (oldGrid[ni][nj]) ? 1 : 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n          if ((oldGrid[i][j] && (nNeighbors === 2 || nNeighbors === 3))\r\n            || (!oldGrid[i][j] && (nNeighbors === 3))) {\r\n            newGrid[i][j] = true;\r\n          }\r\n        }\r\n\t\t\t}\r\n\t\t\t\r\n      return newGrid;\r\n\t\t});\r\n\t\t\r\n    setTimeout(runSimulation, props.tickTime);\r\n\t}, [props]);\r\n\r\n\tconst runSpawn = useCallback(() => {\r\n\t\t// pick a random pivot coordinate\r\n\t\tconst pi = Math.floor(Math.random() * props.nRows);\r\n\t\tconst pj = Math.floor(Math.random() * props.nCols);\r\n\r\n\t\tsetGrid(oldGrid => {\r\n\t\t\treturn produce(oldGrid, newGrid => {\r\n\t\t\t\tspawnCoords.forEach(([ oi, oj ]) => {\r\n\t\t\t\t\tconst i = mod(pi + oi, props.nRows);\r\n\t\t\t\t\tconst j = mod(pj + oj, props.nCols);\r\n\t\t\t\t\tnewGrid[i][j] = true;\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tsetTimeout(runSpawn, props.spawnTime);\r\n\t}, [props]);\r\n\r\n\tif (!running.current) {\r\n\t\trunSimulation();\r\n\t\trunSpawn();\r\n\t\trunning.current = true;\r\n\t}\r\n\r\n  return (\r\n    <div\r\n\t\t\tstyle={{\r\n\t\t\t\t\tdisplay: 'grid',\r\n\t\t\t\t\tgridTemplateColumns: `repeat(${props.nCols}, ${props.cellSize})`\r\n\t\t\t}}\r\n    >\r\n\t\t\t{grid.map((row, i) => \r\n\t\t\t\trow.map((val, j) => (\r\n\t\t\t\t\t<div \r\n\t\t\t\t\t\tkey={`${i}-${j}`}\r\n\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\tconst newGrid = produce(grid, gridCopy => {\r\n\t\t\t\t\t\t\t\tgridCopy[i][j] = !val;\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\tsetGrid(newGrid);\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\twidth: props.cellSize,\r\n\t\t\t\t\t\t\theight: props.cellSize, \r\n\t\t\t\t\t\t\tbackgroundColor: val ? 'black' : undefined,\r\n\t\t\t\t\t\t\tborder: 'solid 1px grey'\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t/>\r\n\t\t\t\t))\r\n\t\t\t)}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameOfLife;\r\n","import React from 'react';\nimport GameOfLife from './GameOfLife';\n\nconst App: React.FC = () => {\n  return (\n    <div>\n      <GameOfLife nRows={50} nCols={100} cellSize={'10px'} tickTime={16} spawnTime={500} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}